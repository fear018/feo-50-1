// THIS
// Функции, которые находятся в свойствах объекта, называются «методами».
// Методы позволяют объектам «действовать»: object.doSomething().
// Методы могут ссылаться на объект через this.

// Определение this:

// Мы находимся внутри функции?
// Да: смотрим следующий пункт.
// Нет: this равен глобальному объекту.

// Мы находимся внутри стрелочной функции?
// Да: значение this такое же, как и в функции на уровень выше (т.е. содержащей данную). Вернитесь на предыдущий шаг и повторите алгоритм для неё. Если же функция не содержится ни в какой другой, this — глобальный объект.
// Нет: смотрим следующий пункт.

// Эта функция вызвана как конструктор (с помощью оператора new)?
// Да: this ссылается на новый объект, находящийся «в процессе конструкции».
// Нет: смотрим следующий пункт.

// Эта функция создана с помощью метода bind?
// Да: значение this равняется значению первого аргумента, который мы передали в метод bind при создании данной функции.
// Нет: смотрим следующий пункт.

// Эта функция передана куда-то в качестве колбэка или обработчика?
// Да: одному Господу известно, чему будет равен this при её вызове. Идите читать документацию по той штуке, которая её станет вызывать.
// Нет: смотрим следующий пункт.

// Эта функция вызвана с помощью метода apply или call?
// Да: в таком случае this равняется первому аргументу, переданному соответствующему методу.
// Нет: смотрим следующий пункт.

// Эта функция получена как значение свойства объекта и сразу же вызвана?
// Да: this равняется вышеупомянутому объекту.
// Нет: смотрим следующий пункт.

// Код выполняется в строгом режиме? ('use strict', ES6 модуль)
// Да: this равняется undefined.
// Нет: this равен глобальному объекту.

// NEW
// конструкторы для создания множества похожих объектов.
// Функции-конструкторы технически являются обычными функциями. Но есть два соглашения:

// Имя функции-конструктора должно начинаться с большой буквы.
// Функция-конструктор должна выполняться только с помощью оператора "new".

// Создаётся новый пустой объект, и он присваивается this.
// Выполняется тело функции. Обычно оно модифицирует this, добавляя туда новые свойства.
// Возвращается значение this.
// Другими словами, new User(...) делает что-то вроде:

// function User(name) {
//   // this = {};  (неявно)

//   // добавляет свойства к this
//   this.name = name;
//   this.isAdmin = false;

//   this.sayHi = function () {
//     console.log("Меня зовут: " + this.name);
//   };
// }

// const user = new User("Вася");
// console.log(user); // Вася
// user.sayHi();
