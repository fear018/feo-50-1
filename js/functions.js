// Функции - позволяют вычислять значение множество раз
// Чтобы не повторять один и тот же код во многих местах, придуманы функции.
// Функции являются основными «строительными блоками» программы.

// Объявление и вызов функции
// let userName = "John";
// const userAge = 30;
// var userCity = "Kiev";

// Функции, начинающиеся с…

// "get…" – возвращают значение,
// "calc…" – что-то вычисляют,
// "create…" – что-то создают,
// "check…" – что-то проверяют и возвращают логическое значение, и т.д.
// Примеры таких имён:

// showMessage(..)     // показывает сообщение
// getAge(..)          // возвращает возраст (получая его каким-то образом)
// calcSum(..)         // вычисляет сумму и возвращает результат
// createForm(..)      // создаёт форму (и обычно возвращает её)
// checkPermission(..) // проверяет доступ, возвращая true/false
// Название и тело функции

// Параметры и аргументы
// Параметры служат как переменные с которыми работает функция внутри
// своей области видимости
// Аргументы - это значения которые передаются в функцию при ее вызове

// Значения по умолчанию
// const message = "Hello everyone!";
// const message2 = "Hello everyone! 2";

// function showMessage() {
//   alert(m);
// }

// showMessage(message, message2);

// function getSum(a, b = 0) {
// const message = "Hello everyone!";

// function getSum(a, b) {
//   console.log(message);
//   return a + b;
// }

// const summ = getSum(2, 5);

// Локальные и внешние переменные
// Область видимости - это зона доступности переменных.
// Глобальная область
// Лексическая область видимости это статическая область в JavaScript,
// имеющая прямое отношение к доступу к переменным,
// функциям и объектам, основываясь на их расположении в коде.
// Блочная область
// Функциональная область (var)

// return - оператор который возвращает значение из функции

// Function Declaration vs Function Expression
// Функции – это значения. Они могут быть присвоены, скопированы или объявлены в любом месте кода.
// Если функция объявлена как отдельная инструкция в основном потоке кода, то это “Function Declaration”.
// Если функция была создана как часть выражения, то это “Function Expression”.
// Function Declaration обрабатываются перед выполнением блока кода. Они видны во всём блоке.
// Функции, объявленные при помощи Function Expression, создаются только когда поток выполнения достигает их.

// когда Javascript компилирует весь код, все объявления переменных, использующие function и var,
// поднимаются/hoisted в верхнюю часть их функциональной области видимости (если объявляется внутри функции) или в глобальную область видимости (если объявляется вне функции) независимо от того, где была сделана фактическая декларация.
// Итак, под капотом происходит следующее: на этапе создания, движок JavaScript просматривает код и, как только он видит ключевое слово var или ключевое слово function, он выделяет некоторую память для них.

// Function Declaration
// function showMessage(message) {
//   alert(message);
// }

// // Function Expression
// const showMessage = function (message) {
//   alert(message);
// };

// const getSumm = (a, b) => a + b;
// console.log(getSumm(3, 4));

// Стрелочная функция - сокращенный вариант записи функции.
// Стрелочные функции очень удобны для простых действий, особенно для однострочных.

// Для того, чтобы сделать код более чистым и понятным, рекомендуется использовать локальные переменные и параметры функций, не пользоваться внешними переменными.
