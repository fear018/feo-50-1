// Объекты – это ассоциативные массивы с рядом дополнительных возможностей.

// Они хранят свойства (пары ключ-значение), где:
// Ключи свойств должны быть строками или символами (обычно строками).
// Значения могут быть любого типа.

// let user = new Object(); // синтаксис "конструктор объекта"
// let user = {};  // синтаксис "литерал объекта"

// Чтобы получить доступ к свойству, мы можем использовать:
// Запись через точку: obj.property.
// Квадратные скобки obj["property"]. Квадратные скобки позволяют взять ключ из переменной, например, obj[varWithKey].

// let user = {     // объект
//   name: "John",  // под ключом "name" хранится значение "John"
//   age: 30        // под ключом "age" хранится значение 30
// };

// Мы можем в любой момент добавить в него новые свойства.

// Для удаления свойства мы можем использовать оператор delete:
// delete user.age;

// let user = { name: "John", age: 30 };

// alert( "age" in user ); // true, user.age существует
// alert( "blabla" in user ); // false, user.blabla не существует

// Для перебора всех свойств объекта используется цикл for..in.
// for (key in object) {
//   // тело цикла выполняется для каждого свойства объекта
// }

// let user = {
//   name: "John",
//   age: 30,
//   isAdmin: true
// };

// for (let key in user) {
//   // ключи
//   alert( key );  // name, age, isAdmin
//   // значения ключей
//   alert( user[key] ); // John, 30, true
// }

// Упорядочение свойств объекта
// Короткий ответ: свойства упорядочены особым образом:
// свойства с целочисленными ключами сортируются по возрастанию,
// остальные располагаются в порядке создания.

// let codes = {
//   "49": "Германия",
//   "41": "Швейцария",
//   "44": "Великобритания",
//   // ..,
//   "1": "США"
// };

// for (let code in codes) {
//   alert(code); // 1, 41, 44, 49
// }

// Копирование объектов и ссылки
// Переменная, которой присвоен объект, хранит не сам объект,
// а его «адрес в памяти» – другими словами, «ссылку» на него.

// let user = { name: 'John' };
// let admin = user;

// admin.name = 'Pete'; // изменено по ссылке из переменной "admin"
// alert(user.name);

// clone = {}; // новый пустой объект
// let user = {
//   name: "John",
//   age: 30
// };

// let clone = {}; // новый пустой объект

// // давайте скопируем все свойства user в него
// for (let key in user) {
//   clone[key] = user[key];
// }

// // теперь clone это полностью независимый объект с тем же содержимым
// clone.name = "Pete"; // изменим в нём данные

// alert( user.name ); // все ещё John в первоначальном объекте

// Object.assign
// const target = { a: 1, b: 2 };
// const source = { c: 4, d: 5 };

// Object.assign(target, source);
// console.log(target);

// Методы объекта, "this"
// пользователь может совершать действия
// let user = {
//   name: "John",
//   age: 30
// };

// user.sayHi = function() {
//   alert("Привет!");
// };

// user.sayHi();

// Опциональная цепочка '?.'
// Проблема «несуществующего свойства»
// let user = {}; // пользователь без свойства "address"
// alert(user.address.street); // Ошибка!
// alert(user?.address.street); // Ошибка!

// Деструктурирующее присваивание
// let options = {
//   title: "Menu",
//   width: 100,
//   height: 200
// };

// let {title, width, height} = options;

// alert(title);  // Menu
// alert(width);  // 100
// alert(height); // 200
